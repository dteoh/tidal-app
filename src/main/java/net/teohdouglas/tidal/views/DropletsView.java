package net.teohdouglas.tidal.views;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Iterator;

import javax.swing.BorderFactory;
import javax.swing.JPanel;

import net.miginfocom.swing.MigLayout;
import net.teohdouglas.tidal.views.models.DropletModel;

public class DropletsView extends JPanel {

    /**
     * Auto generated by Eclipse
     */
    private static final long serialVersionUID = -2013255389551067933L;
    private JPanel dropletsPanel;
    private JPanel dropletsContentPanel;
    private final MouseAdapter dropletViewMouseAdapter;

    public DropletsView() {
        super();
        dropletViewMouseAdapter = new DropletViewMouseAdapter();
        initView();
    }

    private void initView() {
        setLayout(new MigLayout("", "[200]0[600::, grow 100]", ""));
        setBackground(Color.WHITE);

        dropletsPanel = new JPanel();
        dropletsPanel.setLayout(new MigLayout("wrap 1, ins 0"));
        dropletsPanel.setBackground(Color.WHITE);

        dropletsContentPanel = new JPanel();
        dropletsContentPanel.setLayout(new MigLayout("wrap 1, ins 0, gapy 0"));
        dropletsContentPanel.setBorder(BorderFactory.createLineBorder(
                new Color(102, 148, 227), 4));
        dropletsContentPanel.setBackground(Color.WHITE);

        add(dropletsPanel, "grow 100 100");
        add(dropletsContentPanel, "grow 100 100");
    }

    public void displayDroplets(final DropletModel... dropletModels) {
        dropletsPanel.removeAll();
        dropletsContentPanel.removeAll();

        for (int i = 0; i < dropletModels.length; i++) {
            DropletView dropletView = new DropletView(dropletModels[i]);
            dropletView.addMouseListener(dropletViewMouseAdapter);
            dropletsPanel.add(dropletView);
        }

        dropletsPanel.revalidate();
    }

    public void displayDroplets(final Iterator<DropletModel> dropletModels) {
        dropletsPanel.removeAll();
        dropletsContentPanel.removeAll();

        while (dropletModels.hasNext()) {
            DropletView dropletView = new DropletView(dropletModels.next());
            dropletView.addMouseListener(dropletViewMouseAdapter);
            dropletsPanel.add(dropletView);
        }

        dropletsPanel.revalidate();
    }

    private class DropletViewMouseAdapter extends MouseAdapter {
        @Override
        public void mouseClicked(final MouseEvent e) {
            if (e.isPopupTrigger()) {
                return;
            }

            for (Component c : dropletsPanel.getComponents()) {
                DropletView view = (DropletView) c;
                view.deselect();
            }

            dropletsContentPanel.removeAll();
            dropletsContentPanel.revalidate();

            DropletView view = (DropletView) e.getSource();
            view.select();
            Iterator<RippleView> rippleViews = view.getRippleViews();

            while (rippleViews.hasNext()) {
                dropletsContentPanel.add(rippleViews.next(), "pushx, growx");
            }

            dropletsContentPanel.revalidate();
        }
    }
}
