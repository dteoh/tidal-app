package net.teohdouglas.tidal.views;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import javax.swing.BorderFactory;
import javax.swing.JEditorPane;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.text.html.HTMLDocument;

import net.miginfocom.swing.MigLayout;
import net.teohdouglas.tidal.views.models.DropletContentModel;

public class RippleView extends JPanel implements Comparable<RippleView> {

    /**
     * Auto generated by Eclipse
     */
    private static final long serialVersionUID = -6001157043106549763L;

    private static final SimpleDateFormat SDF =
        new SimpleDateFormat("MMM d, h:mm aa");

    // Colors for the various message states
    private static final Color SEEN_BG_COLOR = new Color(239, 239, 239);
    private static final Color UNSEEN_BG_COLOR = Color.WHITE;
    private static final Color SEEN_FONT_COLOR = new Color(68, 68, 68);
    private static final Color READING_FONT_COLOR = Color.BLACK;
    private static final Color PREVIEW_FONT_COLOR = new Color(119, 119, 119);

    // Font styles for the various message states
    private static final Font UNSEEN_FONT_STYLE =
        new Font(Font.SANS_SERIF, Font.BOLD, 13);
    private static final Font SEEN_FONT_STYLE =
        new Font(Font.SANS_SERIF, Font.PLAIN, 13);
    private static final Font READING_SUBJECT_FONT_STYLE =
        new Font(Font.SANS_SERIF, Font.BOLD, 16);
    private static final Font READING_DATE_FONT_STYLE =
        new Font(Font.SANS_SERIF, Font.PLAIN, 16);
    /** Model */
    private final DropletContentModel contentModel;
    /** View components */
    private JLabel originLabel;
    private JLabel subjectLabel;
    private JLabel previewLabel;
    private JLabel receivedLabel;
    private JEditorPane contents;

    private MouseAdapter rippleViewMouseAdapter;

    public RippleView(final DropletContentModel contentModel) {
        super();
        this.contentModel = contentModel;

        initView();

        rippleViewMouseAdapter = new RippleViewMouseAdapter();
        addMouseListener(rippleViewMouseAdapter);
    }

    /**
     * Initialise the view components
     */
    private void initView() {
        setLayout(new MigLayout("hidemode 3, wrap 3", "[215][grow 100][115]",
                ""));
        setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, new Color(214,
                214, 214)));
        setBackground(UNSEEN_BG_COLOR);

        originLabel = new JLabel(contentModel.getOrigin());
        originLabel.setFont(UNSEEN_FONT_STYLE);

        add(originLabel);

        subjectLabel = new JLabel(contentModel.getSubject());
        subjectLabel.setFont(UNSEEN_FONT_STYLE);
        add(subjectLabel, "split 2, left");

        int previewLength =
            contentModel.getContent().length() > 100 ? 100 : contentModel
                    .getContent().length();
        String previewString =
            contentModel.getContent().substring(0, previewLength);
        if (previewString.length() == 100) {
            previewString = previewString.concat(" ...");
        }

        previewLabel = new JLabel(previewString);
        previewLabel.setForeground(PREVIEW_FONT_COLOR);
        // It's how Gmail displays it.
        previewLabel.setFont(SEEN_FONT_STYLE);
        add(previewLabel, "left");

        Calendar received = Calendar.getInstance();
        received.setTimeInMillis(contentModel.getReceived());
        receivedLabel = new JLabel(SDF.format(received.getTime()));
        receivedLabel.setFont(UNSEEN_FONT_STYLE);

        add(receivedLabel, "right");

        contents = new JEditorPane();
        contents.setEditable(false);
        contents.setVisible(false);
        contents.setContentType("text/html");
        contents.setText(wrapHTML(contentModel.getContent()));
        contents.setFont(SEEN_FONT_STYLE);
        contents.setBorder(null);

        String bodyRule =
            "body { font-family: " + SEEN_FONT_STYLE.getFamily() + "; "
                + "font-size: " + SEEN_FONT_STYLE.getSize() + "pt;" + " }";
        ((HTMLDocument) contents.getDocument()).getStyleSheet().addRule(
                bodyRule);

        add(contents, "skip, growx, pushx");
    }

    /**
     * Hides or shows the message, depending on previous state.
     */
    private void showHideMessage() {
        if (contents.isVisible()) {
            // Hide the contents of the message
            contents.setVisible(false);

            setBackground(SEEN_BG_COLOR);

            originLabel.setFont(SEEN_FONT_STYLE);
            subjectLabel.setFont(SEEN_FONT_STYLE);
            receivedLabel.setFont(SEEN_FONT_STYLE);

            receivedLabel.setForeground(SEEN_FONT_COLOR);
            originLabel.setForeground(SEEN_FONT_COLOR);
            subjectLabel.setForeground(SEEN_FONT_COLOR);
            previewLabel.setForeground(PREVIEW_FONT_COLOR);

        } else {
            // Show the contents of the message
            contents.setVisible(true);
            setBackground(UNSEEN_BG_COLOR);

            subjectLabel.setFont(READING_SUBJECT_FONT_STYLE);
            receivedLabel.setFont(READING_DATE_FONT_STYLE);

            receivedLabel.setForeground(READING_FONT_COLOR);
            originLabel.setForeground(READING_FONT_COLOR);
            subjectLabel.setForeground(READING_FONT_COLOR);
            previewLabel.setForeground(UNSEEN_BG_COLOR);
        }
    }

    /**
     * Helper method for wrapping strings into HTML content.
     * 
     * @param content
     * @return Original string wrapped in div markup.
     */
    private String wrapHTML(final String content) {
        return "<div width=\"500px\">" + content + "</div>";
    }

    /**
     * Inner class for handling mouse events.
     * 
     * @author douglas
     */
    private class RippleViewMouseAdapter extends MouseAdapter {
        @Override
        public void mouseClicked(final MouseEvent e) {
            showHideMessage();
        }
    }

    /**
     * Compares RippleView based on received date (newest first) then subject.
     * 
     * @param other
     *            RippleView to compare against.
     */
    @Override
    public int compareTo(final RippleView other) {
        if (contentModel.getReceived() < other.contentModel.getReceived()) {
            return 1;
        }
        if (contentModel.getReceived() > other.contentModel.getReceived()) {
            return -1;
        }
        return contentModel.getSubject().compareTo(
                other.contentModel.getSubject());
    }
}
