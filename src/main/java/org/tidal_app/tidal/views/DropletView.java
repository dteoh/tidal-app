/*
 * Tidal, a communications aggregation and notification tool. 
 * Copyright (C) 2010 Douglas Teoh 
 * 
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version. 
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
 * details. You should have received a copy of the GNU General Public License 
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package org.tidal_app.tidal.views;

import java.awt.Color;
import java.awt.Font;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

import net.miginfocom.swing.MigLayout;

import org.tidal_app.tidal.views.models.DropletContentModel;
import org.tidal_app.tidal.views.models.DropletModel;

import com.google.common.collect.ImmutableList;

/**
 * Used to visualize a single {@link DropletModel} on the interface.
 * 
 * @author Douglas Teoh
 */
public class DropletView extends JPanel {

    /**
     * 
     */
    private static final Color DROPLET_NAME_FOREGROUND = Color.BLACK;
    /**
     * Auto generated by Eclipse
     */
    private static final long serialVersionUID = 4663093783495843321L;
    protected final DropletModel dropletModel;
    protected final List<RippleView> rippleViews;

    private static final Font NORMAL_FONT =
        new Font(Font.SANS_SERIF, Font.BOLD, 24);

    private JLabel dropletNameLabel;

    public DropletView(final DropletModel dropletModel) {
        super();
        this.dropletModel = dropletModel;
        rippleViews = new LinkedList<RippleView>();
        initView();
    }

    /**
     * Initialize the view.
     */
    private void initView() {
        assert (SwingUtilities.isEventDispatchThread());

        setLayout(new MigLayout("wrap", "[grow 100]"));
        setBackground(new Color(248, 248, 248));

        dropletNameLabel =
            new JLabel(dropletModel.getDropletName().toUpperCase());
        dropletNameLabel.setForeground(DROPLET_NAME_FOREGROUND);
        dropletNameLabel.setFont(NORMAL_FONT);

        // Create padding for the label.
        // dropletNameLabel
        // .setBorder(BorderFactory.createEmptyBorder(2, 20, 2, 4));

        // Header JPanel
        add(new JPanel() {
            {
                setLayout(new MigLayout("ins 0", "[]unrel push[][]"));
                setBackground(new Color(248, 248, 248));
                setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0,
                        new Color(192, 192, 192)));

                add(dropletNameLabel);

                // Control buttons, one for delete, another for show/hide
                add(new JButton(), "w 24!, h 24!");
                add(new JButton(), "w 24!, h 24!, wrap");
            }
        }, "pushx, growx");

        for (DropletContentModel contentModel : dropletModel
                .getDropletContents()) {
            RippleView rippleView = new RippleView(contentModel);
            rippleViews.add(rippleView);
        }

        Collections.sort(rippleViews);

        // Content JPanel
        add(new JPanel() {
            {
                setLayout(new MigLayout("wrap 1, gapy 1, ins 0", "[grow 100]"));
                setBackground(new Color(248, 248, 248));

                for (RippleView rippleView : rippleViews) {
                    add(rippleView, "pushx, growx");
                }
            }
        }, "pushx, growx");
    }

    /**
     * Show the state of the view as being selected.
     */
    public void select() {
        // SwingUtilities.invokeLater(new Runnable() {
        // @Override
        // public void run() {
        // dropletNameLabel.setOpaque(true);
        // dropletNameLabel.setFont(SELECTED_FONT);
        // dropletNameLabel.setForeground(Color.WHITE);
        // }
        // });
    }

    /**
     * Show the state of the view as being deselected.
     */
    public void deselect() {
        // SwingUtilities.invokeLater(new Runnable() {
        // @Override
        // public void run() {
        // dropletNameLabel.setOpaque(false);
        // dropletNameLabel.setFont(NORMAL_FONT);
        // dropletNameLabel.setForeground(new Color(102, 148, 227));
        // }
        // });
    }

    /**
     * @return Ripple views of this droplet.
     */
    public Iterable<RippleView> getRippleViews() {
        return ImmutableList.copyOf(rippleViews);
    }

}
