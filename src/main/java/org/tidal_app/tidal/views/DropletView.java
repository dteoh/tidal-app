/*
 * Tidal, a communications aggregation and notification tool. 
 * Copyright (C) 2010 Douglas Teoh 
 * 
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version. 
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
 * details. You should have received a copy of the GNU General Public License 
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package org.tidal_app.tidal.views;

import java.awt.Color;
import java.awt.Font;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

import net.miginfocom.swing.MigLayout;

import org.tidal_app.tidal.views.models.DropletContentModel;
import org.tidal_app.tidal.views.models.DropletModel;

import com.google.common.collect.ImmutableList;

/**
 * Used to visualize a single {@link DropletModel} on the interface.
 * 
 * @author Douglas Teoh
 */
public class DropletView extends JPanel {

    /**
     * Auto generated by Eclipse
     */
    private static final long serialVersionUID = 4663093783495843321L;
    protected final DropletModel dropletModel;
    protected final List<RippleView> rippleViews;

    private static final Font NORMAL_FONT =
        new Font(Font.SANS_SERIF, Font.PLAIN, 13);
    private static final Font SELECTED_FONT =
        new Font(Font.SANS_SERIF, Font.BOLD, 13);

    private JLabel dropletNameLabel;

    public DropletView(final DropletModel dropletModel) {
        super();
        this.dropletModel = dropletModel;
        rippleViews = new LinkedList<RippleView>();
        initView();
    }

    /**
     * Initialize the view.
     */
    private void initView() {
        setLayout(new MigLayout("fill, ins 0", "[grow]"));
        setBackground(Color.WHITE);

        dropletNameLabel = new JLabel(dropletModel.getDropletName());
        dropletNameLabel.setBackground(new Color(102, 148, 227));
        dropletNameLabel.setForeground(new Color(102, 148, 227));
        dropletNameLabel.setFont(NORMAL_FONT);

        // Create padding for the label.
        dropletNameLabel
                .setBorder(BorderFactory.createEmptyBorder(2, 20, 2, 4));

        add(dropletNameLabel, "growx, w 200!");

        Iterator<DropletContentModel> contentModels =
            dropletModel.getDropletContents();

        while (contentModels.hasNext()) {
            rippleViews.add(new RippleView(contentModels.next()));
        }

        Collections.sort(rippleViews);
    }

    /**
     * Show the state of the view as being selected.
     */
    public void select() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                dropletNameLabel.setOpaque(true);
                dropletNameLabel.setFont(SELECTED_FONT);
                dropletNameLabel.setForeground(Color.WHITE);
            }
        });
    }

    /**
     * Show the state of the view as being deselected.
     */
    public void deselect() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                dropletNameLabel.setOpaque(false);
                dropletNameLabel.setFont(NORMAL_FONT);
                dropletNameLabel.setForeground(new Color(102, 148, 227));
            }
        });
    }

    /**
     * @return Ripple views of this droplet.
     */
    public Iterable<RippleView> getRippleViews() {
        return ImmutableList.copyOf(rippleViews);
    }

}
